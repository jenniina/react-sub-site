import { Component, useRef, useEffect } from 'react'


function BlobJS() {




    type Position = {
        id: string
        number: number
        i: number
        x: string
        y: string
        z: string
        color: string
        display: string
    }

    type BackgroundColor = {
        lightness: string
        saturation: string
        hue: string
    }
    const blobContainer = useRef(null)


    let hasRun = false

    useEffect(() => {

        const dragContainer = document.querySelectorAll(".drag-container")

        initialize()
        function initialize() {
            if (!hasRun) {
                let isFirst = true

                dragContainer.forEach((dragContainer, d) => {


                    const positions: Position[][] = []
                    const backgroundColor: BackgroundColor[][] = []

                    positions[d] = loadPosition()
                    backgroundColor[d] = loadBackground()

                    dragContainer?.classList.add(`drag-container${[d]}`)
                    dragContainer?.setAttribute("id", `drag-container${[d]}`)

                    const resetBlob = document.createElement("button")
                    resetBlob.setAttribute("id", `reset-blobs${[d]}`)
                    resetBlob.classList.add("reset-blobs")
                    resetBlob.innerText = "Reset Blobs"
                    dragContainer?.append(resetBlob)

                    function loadPosition(): Position[] {
                        const positionJSON = localStorage.getItem(`Position${[d]}`)
                        if (positionJSON == null) return []
                        return JSON.parse(positionJSON)
                    }
                    function loadBackground(): BackgroundColor[] {
                        const backgroundColorJSON = localStorage.getItem(`BackgroundColor${[d]}`)
                        if (backgroundColorJSON == null) return []
                        return JSON.parse(backgroundColorJSON)
                    }

                    function savePosition() {
                        localStorage.setItem(`Position${[d]}`, JSON.stringify(positions[d]))
                    }
                    function saveBackground() {
                        localStorage.setItem(`BackgroundColor${[d]}`, JSON.stringify(backgroundColor[d]))
                    }

                    const dragLabel: HTMLLabelElement = document.createElement("label")
                    dragLabel.setAttribute("for", `listbox${[d]}`)
                    dragLabel.setAttribute("id", `blobdescription${[d]}`)
                    dragLabel.innerText = "Try dragging the blobs"
                    dragContainer?.prepend(dragLabel)

                    const selectedValue: HTMLDivElement = document.createElement("div")
                    selectedValue.style.setProperty('min-height', "1em")
                    selectedValue.setAttribute("id", `selectedvalue${[d]}`)
                    selectedValue.classList.add("selectedvalue")
                    dragContainer?.append(selectedValue)

                    const defaultLightness = "30"
                    const defaultSaturation = "80"
                    const defaultHue = "214"

                    const dragSliderLightnessWrap = document.createElement("div")
                    dragSliderLightnessWrap.classList.add("drag-slider-wrap")

                    const dragSliderLightness = document.createElement("input")
                    dragSliderLightness.type = "range"
                    dragSliderLightness.min = "0"
                    dragSliderLightness.max = "100"
                    dragSliderLightness.value = backgroundColor[d][0] ? backgroundColor[d][0].lightness : defaultLightness
                    dragSliderLightness.classList.add("drag-slider", "drag-slider-lightness")
                    dragSliderLightness.id = `drag-slider-lightness${[d]}`

                    const dragSliderLightnessLabel: HTMLLabelElement = document.createElement("label")
                    dragSliderLightnessLabel.setAttribute("for", `drag-slider-lightness${[d]}`)
                    dragSliderLightnessLabel.setAttribute("id", `lightnessdescription${[d]}`)
                    dragSliderLightnessLabel.innerText = "Adjust background lightness"

                    const dragSliderLightnessReset = document.createElement("button")
                    dragSliderLightnessReset.innerText = "Reset Lightness"

                    dragSliderLightnessWrap.append(dragSliderLightnessLabel)
                    dragSliderLightnessWrap.append(dragSliderLightness)
                    dragSliderLightnessWrap.append(dragSliderLightnessReset)

                    const dragSliderSaturation = document.createElement("input")
                    dragSliderSaturation.type = "range"
                    dragSliderSaturation.min = "0"
                    dragSliderSaturation.max = "100"
                    dragSliderSaturation.value = backgroundColor[d][0] ? backgroundColor[d][0].saturation : defaultSaturation
                    dragSliderSaturation.classList.add("drag-slider", "drag-slider-saturation")
                    dragSliderSaturation.id = `drag-slider-saturation${[d]}`

                    const dragSliderSaturationWrap = document.createElement("div")
                    dragSliderSaturationWrap.classList.add("drag-slider-wrap")

                    const dragSliderSaturationLabel: HTMLLabelElement = document.createElement("label")
                    dragSliderSaturationLabel.setAttribute("for", `drag-slider-saturation${[d]}`)
                    dragSliderSaturationLabel.setAttribute("id", `saturationdescription${[d]}`)
                    dragSliderSaturationLabel.innerText = "Adjust background saturation"

                    const dragSliderSaturationReset = document.createElement("button")
                    dragSliderSaturationReset.innerText = "Reset Saturation"

                    dragSliderSaturationWrap.append(dragSliderSaturationLabel)
                    dragSliderSaturationWrap.append(dragSliderSaturation)
                    dragSliderSaturationWrap.append(dragSliderSaturationReset)

                    const dragSliderHue = document.createElement("input")
                    dragSliderHue.type = "range"
                    dragSliderHue.min = "0"
                    dragSliderHue.max = "359"
                    dragSliderHue.value = backgroundColor[d][0] ? backgroundColor[d][0].hue : defaultHue
                    dragSliderHue.classList.add("drag-slider", "drag-slider-hue")
                    dragSliderHue.id = `drag-slider-hue${[d]}`

                    const dragSliderHueWrap = document.createElement("div")
                    dragSliderHueWrap.classList.add("drag-slider-wrap")

                    const dragSliderHueLabel: HTMLLabelElement = document.createElement("label")
                    dragSliderHueLabel.setAttribute("for", `drag-slider-hue${[d]}`)
                    dragSliderHueLabel.setAttribute("id", `huedescription${[d]}`)
                    dragSliderHueLabel.innerText = "Adjust background hue"

                    const dragSliderHueReset = document.createElement("button")
                    dragSliderHueReset.innerText = "Reset Hue"

                    dragSliderHueWrap.append(dragSliderHueLabel)
                    dragSliderHueWrap.append(dragSliderHue)
                    dragSliderHueWrap.append(dragSliderHueReset)








                    const dragWrapOuter: HTMLDivElement = document.createElement("div")
                    let hue = dragSliderHue.value
                    let saturation = dragSliderSaturation.value
                    let lightness = dragSliderLightness.value

                    if (isFirst) {
                        const wrapColor = `hsl(${hue}%, ${saturation}%, ${lightness}%)`
                        dragWrapOuter.style.setProperty('--hue', `${hue}`)
                        dragWrapOuter.style.setProperty('--saturation', `${saturation}`)
                        dragWrapOuter.style.setProperty('--lightness', `${lightness}`)
                        dragWrapOuter.style.background = wrapColor
                    }
                    dragWrapOuter.classList.add("drag-wrap-outer")
                    dragContainer?.append(dragWrapOuter)

                    const dragWrap = document.createElement("div")
                    dragWrap.classList.add("drag-wrap")
                    dragWrapOuter.append(dragWrap)

                    const dragUl: HTMLUListElement = document.createElement("ul")
                    dragUl.setAttribute("role", "listbox")
                    dragUl.setAttribute("id", `listbox${[d]}`)
                    dragUl.setAttribute("aria-labelledby", `blobdescription${[d]}`)
                    dragWrap.append(dragUl)

                    const colorBlockBlack = document.createElement("div")
                    colorBlockBlack.classList.add("colorblock", "color-black")
                    colorBlockBlack.setAttribute("id", `color-black${[d]}`)

                    const colorBlockBlue = document.createElement("div")
                    colorBlockBlue.classList.add("colorblock", "color-blue")
                    colorBlockBlue.setAttribute("id", `color-blue${[d]}`)

                    const colorBlockPurple = document.createElement("div")
                    colorBlockPurple.classList.add("colorblock", "color-purple")
                    colorBlockPurple.setAttribute("id", `color-purple${[d]}`)

                    const colorBlockRed = document.createElement("div")
                    colorBlockRed.classList.add("colorblock", "color-red")
                    colorBlockRed.setAttribute("id", `color-red${[d]}`)

                    // Gradients:

                    const colorBlockCyanYellow = document.createElement("div")
                    colorBlockCyanYellow.classList.add("colorblock", "color-cyanyellow")
                    colorBlockCyanYellow.setAttribute("id", `color-cyanyellow${[d]}`)

                    const colorBlockYellowLime = document.createElement("div")
                    colorBlockYellowLime.classList.add("colorblock", "color-yellowlime")
                    colorBlockYellowLime.setAttribute("id", `color-yellowlime${[d]}`)

                    const colorBlockCyanPink = document.createElement("div")
                    colorBlockCyanPink.classList.add("colorblock", "color-cyanpink")
                    colorBlockCyanPink.setAttribute("id", `color-cyanpink${[d]}`)

                    const colorBlockPinkYellow = document.createElement("div")
                    colorBlockPinkYellow.classList.add("colorblock", "color-pinkyellow")
                    colorBlockPinkYellow.setAttribute("id", `color-pinkyellow${[d]}`)



                    if (isFirst) {
                        dragWrapOuter.append(colorBlockYellowLime)
                        dragWrapOuter.append(colorBlockCyanYellow)
                        dragWrapOuter.append(colorBlockCyanPink)
                        dragWrapOuter.append(colorBlockPinkYellow)
                        dragContainer?.append(dragSliderLightnessWrap)
                        dragContainer?.append(dragSliderSaturationWrap)
                        dragContainer?.append(dragSliderHueWrap)

                    } else {
                        dragWrapOuter.append(colorBlockBlack)
                        dragWrapOuter.append(colorBlockBlue)
                        dragWrapOuter.append(colorBlockPurple)
                        dragWrapOuter.append(colorBlockRed)

                    }



                    const exitBlob = document.createElement("div")
                    exitBlob.setAttribute("id", `exitblob${[d]}`)
                    exitBlob.classList.add("exitblob")
                    exitBlob.setAttribute("role", "dialog")
                    dragContainer?.append(exitBlob)

                    const makeLarger = document.createElement("div")
                    makeLarger.classList.add("make-larger")
                    makeLarger.setAttribute("id", `make-larger${[d]}`)
                    makeLarger.innerText = "L"
                    dragWrapOuter.append(makeLarger)

                    const makeSmaller = document.createElement("div")
                    makeSmaller.classList.add("make-smaller")
                    makeSmaller.setAttribute("id", `make-smaller${[d]}`)
                    makeSmaller.innerText = "S"
                    dragWrapOuter.append(makeSmaller)

                    const makeMore = document.createElement("div")
                    makeMore.classList.add("make-more")
                    makeMore.setAttribute("id", `make-more${[d]}`)
                    makeMore.innerText = "+"
                    dragWrapOuter.append(makeMore)

                    const deleteBlob = document.createElement("div")
                    deleteBlob.classList.add("delete-blob")
                    deleteBlob.setAttribute("id", `delete-blob${[d]}`)
                    deleteBlob.innerText = "-"
                    dragWrapOuter.append(deleteBlob)




                    dragSliderLightness.oninput = function () {
                        lightness = dragSliderLightness.value
                        dragWrapOuter.style.setProperty('--lightness', `${lightness}`)

                        const saturation = window.getComputedStyle(dragWrapOuter).getPropertyValue("--saturation");
                        const hue = window.getComputedStyle(dragWrapOuter).getPropertyValue("--hue");

                        const background: BackgroundColor = {
                            lightness: lightness,
                            saturation: saturation,
                            hue: hue
                        }
                        backgroundColor[d][0] = background
                        saveBackground()
                    }
                    dragSliderSaturation.oninput = function () {
                        saturation = dragSliderSaturation.value
                        dragWrapOuter.style.setProperty('--saturation', `${saturation}`)

                        const lightness = window.getComputedStyle(dragWrapOuter).getPropertyValue("--lightness");
                        const hue = window.getComputedStyle(dragWrapOuter).getPropertyValue("--hue");

                        const background: BackgroundColor = {
                            lightness: lightness,
                            saturation: saturation,
                            hue: hue
                        }
                        backgroundColor[d][0] = background

                        saveBackground()
                    }
                    dragSliderHue.oninput = function () {
                        hue = dragSliderHue.value
                        dragWrapOuter.style.setProperty('--hue', `${hue}`)

                        const saturation = window.getComputedStyle(dragWrapOuter).getPropertyValue("--saturation");
                        const lightness = window.getComputedStyle(dragWrapOuter).getPropertyValue("--lightness");

                        const background: BackgroundColor = {
                            lightness: lightness,
                            saturation: saturation,
                            hue: hue
                        }
                        backgroundColor[d][0] = background
                        saveBackground()
                    }

                    dragSliderLightnessReset.onclick = function () {
                        dragSliderLightness.value = defaultLightness
                        dragWrapOuter.style.setProperty('--lightness', `${defaultLightness}`)
                    }
                    dragSliderSaturationReset.onclick = function () {
                        dragSliderSaturation.value = defaultSaturation
                        dragWrapOuter.style.setProperty('--saturation', `${defaultSaturation}`)
                    }
                    dragSliderHueReset.onclick = function () {
                        dragSliderHue.value = defaultHue
                        dragWrapOuter.style.setProperty('--hue', `${defaultHue}`)
                    }


                    function makeDragLiFromStorage() {

                        if (backgroundColor[d][0] != null && isFirst) {
                            dragWrapOuter.style.setProperty('--lightness', `${backgroundColor[d][0].lightness}`)
                            dragWrapOuter.style.setProperty('--saturation', `${backgroundColor[d][0].saturation}`)
                            dragWrapOuter.style.setProperty('--hue', `${backgroundColor[d][0].hue}`)
                        }

                        for (let i: number = 0; i < positions[d].length; i++) {
                            if (positions[d][i] != null) {
                                const element = document.createElement("li")
                                element.classList.add("dragzone")
                                element.setAttribute("id", `${positions[d][i].id}`)
                                element.style.zIndex = positions[d][i].z
                                element.style.background = positions[d][i].color
                                element.style.setProperty('--i', `${positions[d][i].i}`)
                                element.style.left = positions[d][i].x
                                element.style.top = positions[d][i].y
                                element.style.display = positions[d][i].display

                                const span = document.createElement("span")
                                span.classList.add("screen-reader-text")
                                span.innerText = `blob ${positions[d][i].i}`
                                element.append(span)

                                dragUl.append(element)
                            }
                        }
                    }

                    let angle = "90deg"
                    let color1 = "cyan"
                    let color2 = "yellow"

                    const makeDragLi = () => {

                        const dragLi: HTMLLIElement = document.createElement("li")
                        dragLi.classList.add("dragzone")
                        const number = Math.round(getRandomMinMax(0.1, 4))


                        if (isFirst) {
                            switch (number) {
                                case 1:
                                    color1 = "lemonchiffon";
                                    color2 = "greenyellow";
                                    break;
                                case 2:
                                    color1 = "cyan";
                                    color2 = "yellow";
                                    break;
                                case 3:
                                    color1 = "cyan";
                                    color2 = "lightsalmon";
                                    break;
                                case 4:
                                    color1 = "lightsalmon";
                                    color2 = "lemonchiffon";
                                    break;
                            }
                            dragLi.style.background = `linear-gradient(${angle}, ${color1},${color2})`
                        } else {
                            let color = "black"
                            switch (number) {
                                case 1: color = "black"; break;
                                case 2: color = "blue"; break;
                                case 3: color = "magenta"; break;
                                case 4: color = "red"; break;
                            }
                            dragLi.style.background = `${color}`
                        }
                        if (!isFirst) dragLi.classList.add("color-black")
                        dragLi.style.display = "block"
                        return dragLi
                    }
                    if (positions[d].length == 0) {
                        const dragLiArray = Array.from({ length: 15 }, makeDragLi)
                        dragUl.append(...dragLiArray)
                    } else { makeDragLiFromStorage() }

                    let blobCount = positions[d].length ?? 15 //keep same as the length of the previous dragLiArray

                    const dragzonesList = dragContainer?.querySelectorAll<HTMLLIElement>(".dragzone");
                    const dragzones = Array.from(dragzonesList as NodeListOf<HTMLLIElement>)




                    function getRandomMinMax(min: number, max: number) {
                        return Math.random() * (max - min) + min;
                    }



                    function place(id: string, x_pos: number, y_pos: number) {
                        let element = document.getElementById(id);
                        if (element && dragContainer) {
                            element.style.left = dragWrap.offsetWidth / 100 * x_pos + 'px';
                            element.style.top = dragWrap.offsetHeight / 100 * y_pos + 'px';
                        }
                    }

                    let initialX = 0
                    let initialY = 0

                    let zIndex = 1
                    let zIndex0 = -1
                    let moveElement = false;
                    let reset = true

                    if (dragzones) {

                        if (positions[d].length == 0) {
                            for (let i: number = 0; i < dragzones.length; i++) {
                                dragzones[i].style.setProperty('--i', `${dragzones.length + 1 - i}`)
                                dragzones[i].setAttribute("id", `blob${i + 1}-${[d]}`)

                                const dragLiSpan = document.createElement("span")
                                dragLiSpan.classList.add("screen-reader-text")
                                dragLiSpan.innerText = `blob ${i + 1}`
                                dragzones[i].append(dragLiSpan)

                                const blob = document.getElementById(`blob${i + 1}-${[d]}`);
                                if (blob) {

                                    place(`blob${i + 1}-${[d]}`, 60 - getRandomMinMax(0, 50), 60 - getRandomMinMax(0, 50))

                                }
                            }
                        }


                        function widthResize() {
                            //place these items every time the window is resized
                            if (makeLarger) place(`make-larger${[d]}`, 100 - ((makeLarger.offsetWidth / dragWrap.offsetWidth) * 100), 0)

                            if (isFirst && colorBlockYellowLime) place(`color-yellowlime${[d]}`, 100 - ((colorBlockYellowLime.offsetWidth / dragWrap.offsetWidth) * 100), 18)
                            if (isFirst && colorBlockCyanYellow) place(`color-cyanyellow${[d]}`, 100 - ((colorBlockCyanYellow.offsetWidth / dragWrap.offsetWidth) * 100), 38)
                            if (isFirst && colorBlockCyanPink) place(`color-cyanpink${[d]}`, 100 - ((colorBlockCyanPink.offsetWidth / dragWrap.offsetWidth) * 100), 58)
                            if (isFirst && colorBlockPinkYellow) place(`color-pinkyellow${[d]}`, 100 - ((colorBlockPinkYellow.offsetWidth / dragWrap.offsetWidth) * 100), 78)


                            if (!isFirst && colorBlockBlack) place(`color-black${[d]}`, 100 - ((colorBlockBlack.offsetWidth / dragWrap.offsetWidth) * 100), 18)
                            if (!isFirst && colorBlockBlue) place(`color-blue${[d]}`, 100 - ((colorBlockBlue.offsetWidth / dragWrap.offsetWidth) * 100), 38)
                            if (!isFirst && colorBlockPurple) place(`color-purple${[d]}`, 100 - ((colorBlockPurple.offsetWidth / dragWrap.offsetWidth) * 100), 58)
                            if (!isFirst && colorBlockRed) place(`color-red${[d]}`, 100 - ((colorBlockRed.offsetWidth / dragWrap.offsetWidth) * 100), 78)


                            if (makeSmaller) place(`make-smaller${[d]}`, 100 - ((makeSmaller.offsetWidth / dragWrap.offsetWidth) * 100), 95)
                        }




                        // Getting the width of the browser on load
                        widthResize()

                        // Getting the width of the browser whenever the screen resolution changes.
                        window.addEventListener('resize', widthResize)


                        dragzones.forEach((draggable) => {

                            draggable.setAttribute("aria-grabbed", "false")
                            draggable.setAttribute("draggable", "true")
                            draggable.setAttribute("tabindex", "0")
                            draggable.setAttribute("role", "option")


                            const blobID = draggable.id
                            const blobNumber = draggable.id.replace(/^\D+/g, '')//replace non-numbers with empty
                            const blobI = window.getComputedStyle(draggable).getPropertyValue("--i");
                            const blobX = window.getComputedStyle(draggable).getPropertyValue("left");
                            const blobY = window.getComputedStyle(draggable).getPropertyValue("top");
                            const blobZ = window.getComputedStyle(draggable).getPropertyValue("z-index");
                            const blobColor = window.getComputedStyle(draggable).getPropertyValue("background");
                            const blobDisplay = window.getComputedStyle(draggable).getPropertyValue("display");


                            const blobPosition: Position = {
                                id: blobID,
                                number: parseInt(blobNumber),
                                i: parseFloat(blobI),
                                x: blobX,
                                y: blobY,
                                z: blobZ,
                                color: blobColor,
                                display: blobDisplay
                            }
                            positions[d][blobPosition.number - 1] = blobPosition

                            savePosition()


                            //Events Object
                            let events = {
                                mouse: {
                                    down: "mousedown",
                                    move: "mousemove",
                                    up: "mouseup",
                                },
                                touch: {
                                    down: "touchstart",
                                    move: "touchmove",
                                    up: "touchend",
                                },
                            };
                            let deviceType = "";

                            //Detech possible touch device
                            const isTouchDevice = () => {
                                try {
                                    //Try to create TouchEvent (fails for desktops and throws error)
                                    document.createEvent("TouchEvent");
                                    deviceType = "touch";
                                    return true;
                                } catch (e) {
                                    deviceType = "mouse";
                                    return false;
                                }
                            };
                            isTouchDevice();

                            function start(e: Event) {
                                e.preventDefault();

                                initialX = !isTouchDevice() ? (e as MouseEvent).clientX : (e as TouchEvent).touches[0].clientX;
                                initialY = !isTouchDevice() ? (e as MouseEvent).clientY : (e as TouchEvent).touches[0].clientY;

                                moveElement = true;
                                (e.target as HTMLElement).classList.add("drag");
                                zIndex += 1;
                                (e.target as HTMLElement).style.setProperty("z-index", `${zIndex}`);
                                (e.target as HTMLElement).setAttribute("aria-grabbed", "true");
                                (e.target as HTMLElement).focus()
                            }

                            //Handle mousemove and touchmove
                            function movement(e: Event) {
                                if (moveElement) {
                                    e.preventDefault();
                                    let newX = !isTouchDevice() ? (e as MouseEvent).clientX : (e as TouchEvent).touches[0].clientX;
                                    let newY = !isTouchDevice() ? (e as MouseEvent).clientY : (e as TouchEvent).touches[0].clientY;
                                    (e.target as HTMLElement).style.top = (e.target as HTMLElement).offsetTop - (initialY - newY) + "px";
                                    (e.target as HTMLElement).style.left = (e.target as HTMLElement).offsetLeft - (initialX - newX) + "px";
                                    initialX = newX;
                                    initialY = newY;
                                }
                            }





                            //Handle mouse up and touch end
                            function stopMovement(e: Event) {
                                let value = (e.target as HTMLElement).style.getPropertyValue("--i");
                                let scale = parseFloat(value)

                                //Gradients: 

                                if (elementsOverlap((e.target as HTMLElement), colorBlockYellowLime)) {
                                    color1 = "lemonchiffon";
                                    color2 = "greenyellow";
                                    (e.target as HTMLElement).style.background = `linear-gradient(${angle}, ${color1},${color2})`;
                                    (e.target as HTMLElement).removeAttribute('class');
                                    (e.target as HTMLElement).classList.add("dragzone", "color-yellowlime");
                                }

                                if (elementsOverlap((e.target as HTMLElement), colorBlockCyanYellow)) {
                                    color1 = "cyan";
                                    color2 = "yellow";
                                    (e.target as HTMLElement).style.background = `linear-gradient(${angle}, ${color1},${color2})`;
                                    (e.target as HTMLElement).removeAttribute('class');
                                    (e.target as HTMLElement).classList.add("dragzone", "color-cyanyellow");
                                }

                                if (elementsOverlap((e.target as HTMLElement), colorBlockCyanPink)) {
                                    color1 = "cyan";
                                    color2 = "lightsalmon";
                                    (e.target as HTMLElement).style.background = `linear-gradient(${angle}, ${color1},${color2})`;
                                    (e.target as HTMLElement).removeAttribute('class');
                                    (e.target as HTMLElement).classList.add("dragzone", "color-cyanpink");
                                }

                                if (elementsOverlap((e.target as HTMLElement), colorBlockPinkYellow)) {
                                    color1 = "lightsalmon";
                                    color2 = "lemonchiffon";
                                    (e.target as HTMLElement).style.background = `linear-gradient(${angle}, ${color1},${color2})`;
                                    (e.target as HTMLElement).removeAttribute('class');
                                    (e.target as HTMLElement).classList.add("dragzone", "color-pinkyellow");
                                }



                                //Regular colors:

                                if (elementsOverlap((e.target as HTMLElement), colorBlockBlack)) {
                                    (e.target as HTMLElement).style.background = "black";
                                    (e.target as HTMLElement).removeAttribute('class');
                                    (e.target as HTMLElement).classList.add("dragzone", "color-black");
                                }
                                if (elementsOverlap((e.target as HTMLElement), colorBlockPurple)) {
                                    (e.target as HTMLElement).style.background = "magenta";
                                    (e.target as HTMLElement).removeAttribute('class');
                                    (e.target as HTMLElement).classList.add("dragzone", "color-magenta");
                                }
                                if (elementsOverlap((e.target as HTMLElement), colorBlockBlue)) {
                                    (e.target as HTMLElement).style.background = "blue";
                                    (e.target as HTMLElement).removeAttribute('class');
                                    (e.target as HTMLElement).classList.add("dragzone", "color-blue");
                                }
                                if (elementsOverlap((e.target as HTMLElement), colorBlockRed)) {
                                    (e.target as HTMLElement).style.background = "red";
                                    (e.target as HTMLElement).removeAttribute('class');
                                    (e.target as HTMLElement).classList.add("dragzone", "color-red");
                                }

                                if (elementsOverlap((e.target as HTMLElement), makeLarger)) {
                                    scale += 1;
                                    scale = Math.min(Math.max(2, scale), 14);
                                    (e.target as HTMLElement).style.setProperty('--i', `${scale}`)
                                }
                                if (elementsOverlap((e.target as HTMLElement), makeSmaller)) {
                                    scale -= 1;
                                    scale = Math.min(Math.max(2, scale), 14);
                                    (e.target as HTMLElement).style.setProperty('--i', `${scale}`)
                                }
                                if (elementsOverlap((e.target as HTMLElement), makeMore)) {
                                    makeBlob((e.target as HTMLDivElement))
                                }
                                if (elementsOverlap((e.target as HTMLElement), deleteBlob)) {
                                    hideBlob((e.target as HTMLElement))
                                }








                                moveElement = false;
                                (e.target as HTMLElement).classList.remove("drag");
                                (e.target as HTMLElement).setAttribute("aria-grabbed", "false");
                                (e.target as HTMLElement).blur()

                            }

                            //Add event listeners
                            draggable.addEventListener(events[deviceType as keyof typeof events].down, start);
                            draggable.addEventListener(events[deviceType as keyof typeof events].move, movement);
                            draggable.addEventListener(events[deviceType as keyof typeof events].up, stopMovement);
                            draggable.addEventListener("mouseleave", stopMovement);
                            draggable.addEventListener('blur', blurblob)
                            draggable.addEventListener('focus', focusedBlob)

                            //During focus
                            function focusedBlob(e: Event) {
                                let value = (e.target as HTMLElement).style.getPropertyValue("--i");
                                let scale = parseFloat(value);

                                (e.target as HTMLElement).addEventListener('wheel', zoom, { passive: false });
                                (e.target as HTMLElement).addEventListener('keydown', keyDown);

                                (e.target as HTMLElement).classList.add("drag");
                                (e.target as HTMLElement).setAttribute("aria-grabbed", "true");
                                //dragWrap.setAttribute("aria-expanded", "true");
                                dragUl.setAttribute("aria-activedescendant", `${(e.target as HTMLElement).id}`)
                                if (selectedValue) selectedValue.innerText = `Selected blob: ${(e.target as HTMLElement).innerText}, size: ${scale}`

                                zIndex += 1;
                                (e.target as HTMLElement).style.setProperty("z-index", `${zIndex}`)

                                let attrLeft = window.getComputedStyle(draggable).getPropertyValue("left");
                                let attrTop = window.getComputedStyle(draggable).getPropertyValue("top");



                                function zoom(event: { preventDefault: () => void; deltaY: number }) {
                                    event.preventDefault();

                                    scale += event.deltaY * -0.005;
                                    // Restrict scale
                                    scale = Math.min(Math.max(2, scale), 14);
                                    // Apply
                                    (e.target as HTMLElement).style.setProperty('--i', `${scale}`)

                                    if (selectedValue) selectedValue.innerText = `Selected blob: ${(e.target as HTMLElement).innerText}, size: ${scale}`
                                    zIndex += 1;

                                }


                                let blobColor = (e.target as HTMLElement).style.background;

                                const movePx = 8;

                                function keyDown(e: KeyboardEvent) {
                                    switch (e.key) {
                                        case 'ArrowLeft':
                                            e.preventDefault();
                                            (e.target as HTMLElement).style.left = parseFloat(attrLeft) - Number(movePx) + "px";
                                            attrLeft = window.getComputedStyle(draggable).getPropertyValue("left");
                                            break;
                                        case 'ArrowRight':
                                            e.preventDefault();
                                            (e.target as HTMLElement).style.left = parseFloat(attrLeft) + Number(movePx) + "px";
                                            attrLeft = window.getComputedStyle(draggable).getPropertyValue("left");
                                            break;
                                        case 'ArrowUp':
                                            e.preventDefault();
                                            (e.target as HTMLElement).style.top = parseFloat(attrTop) - Number(movePx) + "px";
                                            attrTop = window.getComputedStyle(draggable).getPropertyValue("top");
                                            break;
                                        case 'ArrowDown':
                                            e.preventDefault();
                                            (e.target as HTMLElement).style.top = parseFloat(attrTop) + Number(movePx) + "px";
                                            attrTop = window.getComputedStyle(draggable).getPropertyValue("top");
                                            break;
                                        case 'Escape':
                                            e.stopImmediatePropagation()
                                            e.preventDefault();
                                            exitBlob.setAttribute("tabindex", "0");
                                            (e.target as HTMLElement).blur()
                                            dragWrap.blur()
                                            //Go to exit notice in order to remove focus from the app
                                            exitBlob.innerText = "Thank you for playing"
                                            exitBlob.focus()
                                            break;
                                        case 'Enter': //Cycle through colors
                                            e.stopImmediatePropagation()
                                            if (draggable.closest(".drag-container0")) {
                                                if (color1 == "lightsalmon" && color2 == "lemonchiffon") {
                                                    color1 = "lemonchiffon";
                                                    color2 = "greenyellow";
                                                    (e.target as HTMLElement).style.backgroundImage = `linear-gradient(${angle}, ${color1},${color2})`;
                                                    (e.target as HTMLElement).removeAttribute('class');
                                                    (e.target as HTMLElement).classList.add("dragzone", "color-yellowlime");
                                                } else if (color1 == "lemonchiffon" && color2 == "greenyellow") {
                                                    color1 = "cyan";
                                                    color2 = "yellow";
                                                    (e.target as HTMLElement).style.backgroundImage = `linear-gradient(${angle}, ${color1},${color2})`;
                                                    (e.target as HTMLElement).removeAttribute('class'); (e.target as HTMLElement).classList.add("dragzone", "color-cyanyellow");
                                                } else if (color1 == "cyan" && color2 == "yellow") {
                                                    color1 = "cyan";
                                                    color2 = "lightsalmon";
                                                    (e.target as HTMLElement).style.background = `linear-gradient(${angle}, ${color1},${color2})`;
                                                    (e.target as HTMLElement).removeAttribute('class'); (e.target as HTMLElement).classList.add("dragzone", "color-cyanpink");
                                                } else if (color1 == "cyan" && color2 == "lightsalmon") {
                                                    color1 = "lightsalmon";
                                                    color2 = "lemonchiffon";
                                                    (e.target as HTMLElement).style.background = `linear-gradient(${angle}, ${color1},${color2})`;
                                                    (e.target as HTMLElement).removeAttribute('class'); (e.target as HTMLElement).classList.add("dragzone", "color-pinkyellow");
                                                } else {
                                                    color1 = "lemonchiffon";
                                                    color2 = "greenyellow";
                                                    (e.target as HTMLElement).style.backgroundImage = `linear-gradient(${angle}, ${color1},${color2})`;
                                                    (e.target as HTMLElement).removeAttribute('class'); (e.target as HTMLElement).classList.add("dragzone", "color-yellowlime");
                                                }
                                            } else {
                                                if (blobColor == "black") {
                                                    (e.target as HTMLElement).style.background = "blue";
                                                    blobColor = (e.target as HTMLElement).style.background;
                                                    (e.target as HTMLElement).classList.remove("color-black");
                                                    (e.target as HTMLElement).classList.add("color-blue");
                                                } else if (blobColor == "blue") {
                                                    (e.target as HTMLElement).style.background = "magenta";
                                                    blobColor = (e.target as HTMLElement).style.background;
                                                    (e.target as HTMLElement).classList.remove("color-blue");
                                                    (e.target as HTMLElement).classList.add("color-magenta");
                                                } else if (blobColor == "magenta") {
                                                    (e.target as HTMLElement).style.background = "red";
                                                    blobColor = (e.target as HTMLElement).style.background;
                                                    (e.target as HTMLElement).classList.remove("color-magenta");
                                                    (e.target as HTMLElement).classList.add("color-red");
                                                } else {
                                                    (e.target as HTMLElement).style.background = "black";
                                                    blobColor = (e.target as HTMLElement).style.background;
                                                    (e.target as HTMLElement).classList.remove("color-red");
                                                    (e.target as HTMLElement).classList.add("color-black");
                                                }
                                            }
                                            e.preventDefault();
                                            break;
                                        case '0': //Move blob to the bottom of the z-index pile
                                            e.stopImmediatePropagation()
                                            e.preventDefault();
                                            if (reset) {
                                                reset = false;
                                                (e.target as HTMLElement).style.setProperty("z-index", `${zIndex0}`)
                                                zIndex0 -= 1;
                                                const cooldown = () => { reset = true }
                                                setTimeout(cooldown, 100);
                                            }
                                            break;
                                        case '1': //make blob smaller
                                            e.stopImmediatePropagation()
                                            e.preventDefault();
                                            if (reset) {
                                                reset = false;
                                                scale -= 1;
                                                scale = Math.min(Math.max(2, scale), 14);
                                                (e.target as HTMLElement).style.setProperty('--i', `${scale}`)
                                                selectedValue.innerText = `Selected blob: ${(e.target as HTMLElement).innerText}, size: ${scale}`
                                                const cooldown = () => { reset = true }
                                                setTimeout(cooldown, 100);
                                            }
                                            break;
                                        case '2': //make blob larger
                                            e.stopImmediatePropagation()
                                            e.preventDefault();
                                            if (reset) {
                                                reset = false;
                                                scale += 1;
                                                scale = Math.min(Math.max(2, scale), 14);
                                                (e.target as HTMLElement).style.setProperty('--i', `${scale}`)
                                                selectedValue.innerText = `Selected blob: ${(e.target as HTMLElement).innerText}, size: ${scale}`
                                                const cooldown = () => { reset = true }
                                                setTimeout(cooldown, 100);
                                            }
                                            break
                                        case '3': //make a new clone
                                        case '+':
                                            e.stopImmediatePropagation()
                                            e.preventDefault();
                                            makeBlob((e.target as HTMLDivElement))
                                            break
                                        case 'Delete': //remove blob
                                        case '-':
                                            e.stopImmediatePropagation()
                                            e.preventDefault();
                                            hideBlob((e.target as HTMLElement))
                                            break;
                                    }
                                }
                            }

                            //on blur
                            function blurblob(e: Event) {
                                (e.target as HTMLElement).classList.remove("drag");
                                (e.target as HTMLElement).setAttribute("aria-grabbed", "false")
                                dragWrap.blur()
                                dragWrap.setAttribute("aria-activedescendant", "")
                                if (selectedValue) selectedValue.innerText = "Selected blob: none"

                                const blobID = (e.target as HTMLElement).id
                                const blobNumber = (e.target as HTMLElement).id.replace(/^\D+/g, '')//replace non-numbers with empty
                                const blobI = window.getComputedStyle((e.target as HTMLElement)).getPropertyValue("--i");
                                const blobX = window.getComputedStyle((e.target as HTMLElement)).getPropertyValue("left");
                                const blobY = window.getComputedStyle((e.target as HTMLElement)).getPropertyValue("top");
                                const blobZ = window.getComputedStyle((e.target as HTMLElement)).getPropertyValue("z-index");
                                const blobColor = window.getComputedStyle((e.target as HTMLElement)).getPropertyValue("background");
                                const blobDisplay = window.getComputedStyle(draggable).getPropertyValue("display");

                                const blobPosition: Position = {
                                    id: blobID,
                                    number: parseInt(blobNumber),
                                    i: parseFloat(blobI),
                                    x: blobX,
                                    y: blobY,
                                    z: blobZ,
                                    color: blobColor,
                                    display: blobDisplay
                                }
                                positions[d][blobPosition.number - 1] = blobPosition


                                savePosition()

                            }

                            //Clone blob
                            function makeBlob(target: HTMLDivElement) {
                                if (reset) {
                                    blobCount++
                                    reset = false

                                    const clone = target.cloneNode(true);
                                    (clone as HTMLDivElement).removeAttribute("id");
                                    (clone as HTMLDivElement).setAttribute("id", `blob${blobCount}-${d}`)
                                    let cloneSpan = target.querySelector("span")
                                    if (cloneSpan) cloneSpan.innerText = `blob${blobCount}`;

                                    zIndex += 1;
                                    (clone as HTMLDivElement).style.setProperty("z-index", `${zIndex}`);

                                    target.blur();

                                    dragUl.append(clone);

                                    (clone as HTMLDivElement).addEventListener(events[deviceType as keyof typeof events].down, start);
                                    (clone as HTMLDivElement).addEventListener(events[deviceType as keyof typeof events].move, movement);
                                    (clone as HTMLDivElement).addEventListener(events[deviceType as keyof typeof events].up, stopMovement);
                                    (clone as HTMLDivElement).addEventListener("mouseleave", stopMovement);
                                    (clone as HTMLDivElement).addEventListener('blur', blurblob);
                                    (clone as HTMLDivElement).addEventListener('focus', focusedBlob);

                                    (clone as HTMLDivElement).focus();

                                    const cooldown = () => { reset = true }
                                    setTimeout(cooldown, 100);
                                }
                            }

                            //Remove blob
                            function hideBlob(target: HTMLElement) {
                                if (reset) {
                                    reset = false;
                                    //(e.target as HTMLElement).remove()//caused placement errors in other blobs
                                    target.style.display = "none"
                                    const cooldown = () => { reset = true }
                                    setTimeout(cooldown, 100);
                                }
                            }

                        })

                    }

                    //Remove exit notice's tabindex as unnecessary after leaving it
                    exitBlob.addEventListener('blur', () => {
                        exitBlob.removeAttribute("tabindex")
                    });

                    //Check to see if elements overlap
                    function elementsOverlap(element1: HTMLElement, element2: HTMLElement) {
                        const domRect1 = element1.getBoundingClientRect();
                        const domRect2 = element2.getBoundingClientRect();

                        return !(
                            (domRect1.top + 5) > (domRect2.bottom - 5) ||
                            domRect1.right < domRect2.left ||
                            (domRect1.bottom - 5) < (domRect2.top + 5) ||
                            domRect1.left > domRect2.right
                        );
                    }
                    isFirst = false //reset after first run
                })

                const resetBlobs = document.querySelectorAll(".reset-blobs")
                for (let i: number = 0; i < resetBlobs.length; i++) {

                    resetBlobs[i].addEventListener("click", e => {
                        e.preventDefault()

                        dragContainer.forEach(dragContainer => {
                            dragContainer?.replaceChildren();
                        })
                        window.localStorage.removeItem(`Position${[i]}`)
                        hasRun = false // to allow initialize to run again
                        initialize()
                    })

                }
            }
            hasRun = true //to stop useEffect from running twice

        }


    }, []);


    return (
        <>
            <section className="drag-container"></section>
            <svg className="filter">
                <filter id="svgfilter">
                    <feGaussianBlur in="SourceGraphic" stdDeviation="10"></feGaussianBlur>
                    <feColorMatrix values="
1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0
0 0 0 20 -10 
">

                    </feColorMatrix>
                </filter>
            </svg>
            <section className="drag-container"></section>
        </>
    )
}

export default BlobJS
